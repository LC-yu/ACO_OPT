function [SRN,SR,SL,Lbest,Lave]=aco_4opt(CT,M,IT,alpha,beta,rho,Q)

tic
Cmax = 20;
lambda=0.5;
rhomin=rho;
RHO(1,1)=rho;
% the number of city
N=size(CT,1);
% 
D=zeros(N);
for n=1:N
    dxy=repmat(CT(n,[2,3]),N,1)-CT(:,[2,3]);
    ds=abs(dxy(:,1)+1j*dxy(:,2));
    D(:,n)=ds;
    D(n,n)=1e-8;
end

% Initialization settings
Eta=1./D;                               % Heuristic functions
Tau=ones(N);                            % Pheromone Matrix
Table=zeros(M,N);                       % Route log sheet
Rbest=zeros(IT,N);                      % Optimal path for each generation
Lbest=zeros(IT,1);                      % Length of the optimal path for each iteration
Lave=zeros(IT,1);                       
iter=1;                                 % Initial value of the number of iterations

% % Iterate to find the best path
while iter<=IT
    st=randi([1,N],M,1);
    Table(:,1)=st;
    CIN=[1:N];
    for m=1:M
        for n=2:N
            tabu=Table(m,1:(n-1));          
            allow=setdiff(CIN,tabu); 
            P=allow;
            for k=1:length(allow)
                P(k)=Tau(tabu(end),allow(k))^alpha*Eta(tabu(end),allow(k))^beta;
            end
            P=P/sum(P);
            Pc=cumsum(P);
            TAI=find(Pc>=rand);
            TAR=allow(TAI(1));
            Table(m,n)=TAR;
        end
    end
    % Calculate the distance of each ant's path
    Len=zeros(M,1);
    for m=1:M
        Route=[Table(m,:),Table(m,1)];
        ch1=Route(1:end-1);
        ch2=Route(2:end);
        d=D(ch1,ch2);
        Len(m)=sum(diag(d));
    end
    % Sort the path length
    [Len,LI]=sort(Len);
    Table=Table(LI,:);
    %The first n = M/2 for optimization
    for m=1:floor(M/2)
        tabu=Table(m,:);
        ll=Len(m);
        % 4opt
        for n=1:(length(tabu)-5)
            ta1=tabu([1:(n-1)]);
            ta2=tabu([n:(n+4)]);
            ta3=tabu([(n+5):end]);
            XX=[1,3,2,4,5;1,3,4,2,5;1,4,2,3,5;1,4,3,2,5];
            for k=1:size(XX,1)
                % New Path
                ta=[ta1,ta2(XX(k,:)),ta3];
             
                tate=[ta,ta(1)];
                % New path length
                ch1=tate(1:end-1);
                ch2=tate(2:end);
                d=D(ch1,ch2);
                tall=sum(diag(d));
                if tall<ll
                    ll=tall;
                    tabu=ta;
                end
            end
            % Update path
            Table(m,:)=tabu;
            % Update path length
            Len(m)=ll;
        end
    end
    
    
    % Calculate shortest path distance
    if abs(iter-1)<1e-8
        [minL,minIN]=min(Len);
        Lbest(iter)=minL;
        Lave(iter)=mean(Len);
        Rbest(iter,:)=Table(minIN,:);
    else
        [minL,minIN]=min(Len);
        Lbest(iter)=min(Lbest(iter-1),minL);
        Lave(iter)=mean(Len);
        if abs(Lbest(iter)-minL)<1e-8
            Rbest(iter,:)=Table(minIN,:);
        else
            Rbest(iter,:)=Rbest((iter-1),:);
        end
    end
    
    Delta_Tau=zeros(N);
    % Ant-by-ant calculation
    for m=1:M
        % City-by-city calculation
        for n=1:(N-1)
            i=Table(m,n);
            j=Table(m,n+1);
            Delta_Tau(i,j)=Delta_Tau(i,j)+Q/Len(m);
        end
        i=Table(m,N);
        j=Table(m,1);
        Delta_Tau(i,j)=Delta_Tau(i,j)+Q/Len(m);
    end
    LWORST=max(Len);
    LBEST=min(Len);
    
    
    
    % Record C value
    if iter>=2 & abs(Lbest(iter)-Lbest(iter-1))<1e-8
        C=C+1;
    else
        C=1;
    end
    
    if abs(C-Cmax)<1e-8 & iter>=2
        rho=max([lambda*RHO(iter-1),rhomin]);
    elseif iter>=2
        rho=RHO(iter-1,1);
    end
    % rho upddate
    if rho<rhomin
        rhomin=rho;
    end
    RHO(iter,1)=rho;
    
    Tau=(1-rho).*Tau+Delta_Tau;   % Pheromone Update 
%     Tau=(1-rho)*Tau+Delta_Tau+Q/LBEST-Q/LWORST;
    % Increase the number of iterations, empty the path record table
    iter=iter+1;
    Table=zeros(M,N);
end
toc
% Show the result
[SL,index]=min(Lbest);                      % shortest distance
SR=[Rbest(index,:),Rbest(index,1)];         % shortest path
SRN=CT(SR);
SRN=reshape(SRN,1,length(SRN));
disp(['shortest distance:',num2str(SL)]);
disp(['shortest path:']);
disp(SRN);

%Map the path
figure;
plot(CT(SR,2),CT(SR,3),'o-');hold on;
grid on;
%Display city number
for n=1:N
    text(CT(n,2),CT(n,3),[' ',num2str(CT(n,1))]);
end
%Draw the starting point
plot(CT(SR(1),2),CT(SR(1),3),'rv','MarkerSize',20);
hold on;
xlabel('City Location');
ylabel('City Location');
title(['The optimal solution generated by ACO+4opt:',num2str(SL)]);


